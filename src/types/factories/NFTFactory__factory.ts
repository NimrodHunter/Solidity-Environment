/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTFactory, NFTFactoryInterface } from "../NFTFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "clone",
        type: "address",
      },
    ],
    name: "Cloned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
      {
        internalType: "string",
        name: "cardName",
        type: "string",
      },
      {
        internalType: "string",
        name: "cardSymbol",
        type: "string",
      },
    ],
    name: "mintNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055610430806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a3ee38ae1461003b578063e574609e14610050575b600080fd5b61004e6100493660046102fd565b61006b565b005b61005960015481565b60405190815260200160405180910390f35b600260005414156100c35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556001600160a01b0383166100db57600080fd5b60006100e68461019f565b60405163266c45bb60e11b81529091506001600160a01b03821690634cd88b769061011790869086906004016103cc565b600060405180830381600087803b15801561013157600080fd5b505af1158015610145573d6000803e3d6000fd5b50505050600160008154610158906103fa565b91829055506001556040516001600160a01b038216907f783540fb4221a3238720dc7038937d0d79982bcf895274aa6ad179f82cf0d53c90600090a2505060016000555050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b0381166102555760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064016100ba565b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261028157600080fd5b813567ffffffffffffffff8082111561029c5761029c61025a565b604051601f8301601f19908116603f011681019082821181831017156102c4576102c461025a565b816040528381528660208588010111156102dd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561031257600080fd5b83356001600160a01b038116811461032957600080fd5b9250602084013567ffffffffffffffff8082111561034657600080fd5b61035287838801610270565b9350604086013591508082111561036857600080fd5b5061037586828701610270565b9150509250925092565b6000815180845260005b818110156103a557602081850181015186830182015201610389565b818111156103b7576000602083870101525b50601f01601f19169290920160200192915050565b6040815260006103df604083018561037f565b82810360208401526103f1818561037f565b95945050505050565b600060001982141561041c57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";

type NFTFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTFactory__factory extends ContractFactory {
  constructor(...args: NFTFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NFTFactory";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTFactory> {
    return super.deploy(overrides || {}) as Promise<NFTFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NFTFactory {
    return super.attach(address) as NFTFactory;
  }
  connect(signer: Signer): NFTFactory__factory {
    return super.connect(signer) as NFTFactory__factory;
  }
  static readonly contractName: "NFTFactory";
  public readonly contractName: "NFTFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTFactoryInterface {
    return new utils.Interface(_abi) as NFTFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTFactory {
    return new Contract(address, _abi, signerOrProvider) as NFTFactory;
  }
}
